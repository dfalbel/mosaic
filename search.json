[{"path":"https://dfalbel.github.io/mosaic/articles/get-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get Started","text":"install Mosaic package, can use following command R:","code":"pak::pkg_install(\"dfalbel/mosaic\")"},{"path":"https://dfalbel.github.io/mosaic/articles/get-started.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Get Started","text":"two main use cases htmlwidgets R: Static documents: can create plot display Quarto RMarkdown documents. plot rendered interactive HTML widget output document. ’s backing server needed data embedded document. Interactive applications: can embed Mosaic plots Shiny applications create interactive dashboards data exploration tools. ’s backing server can used load data dynamically respond user inputs. mosaic R package covers use cases, way provide data generate plots slightly different depending context.","code":""},{"path":"https://dfalbel.github.io/mosaic/articles/get-started.html","id":"using-in-static-documents","dir":"Articles","previous_headings":"Usage","what":"Using in static documents","title":"Get Started","text":"create mosaic plots, use mosaic function. First define specification. spec list describes plot(s) want create mosaic well data used optionally attributes. See specification documentation details. simplest, spec can list single plot definition. example simple scatter plot using built-penguins dataset: Similar grammars, plot consists marks — graphical primitives bars, areas, lines—serve chart layers. Mosaic uses semantics Observable Plot, plot dedicated set encoding channels named scale mappings x, y, color, opacity, etc. See marks API reference full list available marks channels. Notice static documents, provide data named argument mosaic function. name argument (penguins) must match name used spec (= \"penguins\"). Shiny applications, data provided differently (see ). add legend, modify spec include . add vconcat property adds legend scatter plot. Notice add name plot legend can refer .","code":"spec <- list(   plot = list(     list(       mark = \"dot\",       data = list(from = \"penguins\"),       x = \"body_mass\",       y = \"flipper_len\",       stroke = list(column = \"species\"),       symbol = list(column = \"species\")     )   ) ) mosaic(   spec,   penguins = penguins ) spec <- list(   vconcat = list(     list(        legend = \"symbol\",        \"for\" = \"scatter\"     ),     list(       name  = \"scatter\",       plot = list(list(         mark = \"dot\",         data = list(from = \"penguins\"),         x = \"body_mass\",         y = \"flipper_len\",         stroke = list(column = \"species\"),         symbol = list(column = \"species\")       ))     )   ) )  mosaic(   spec,   penguins = penguins )"},{"path":"https://dfalbel.github.io/mosaic/articles/get-started.html","id":"loading-data","dir":"Articles","previous_headings":"Usage > Using in static documents","what":"Loading data","title":"Get Started","text":"Loading data way embbed full data document, may desirable large datasets. can also use data attribute spec load data asyncronously plot. also allows acquiring data remote server document visualized. Notice case, document longer fully self-contained, need fetch data server client views . Files downloaded URL relative baseURL parameter mosaic function. default, pointing examples server hosted IDL. change server public CDN providing dataset want visualize. can read Parquet, CSV, JSON files. See data loading documentation details.","code":"spec <- list(   meta=list(     title=\"Airline Travelers\",     description=\"A labeled line chart comparing airport travelers in 2019 and 2020.\",     credit=\"Adapted from an [Observable Plot example](https://observablehq.com/@observablehq/plot-labeled-line-chart).\"   ),   data=list(     travelers = list(file=\"data/travelers.parquet\"),     endpoint = \"SELECT * FROM travelers ORDER BY date DESC LIMIT 1\\n\"   ),   plot=list(     list(mark=\"ruleY\", data=c(0)),     list(mark=\"lineY\", data=list(from=\"travelers\"), x=\"date\", y=\"previous\", strokeOpacity=0.35),     list(mark=\"lineY\", data=list(from=\"travelers\"), x=\"date\", y=\"current\"),     list(mark=\"text\", data=list(from=\"endpoint\"), x=\"date\", y=\"previous\", text=list(\"2019\"), fillOpacity=0.5, lineAnchor=\"bottom\", dy=-6),     list(mark=\"text\", data=list(from=\"endpoint\"), x=\"date\", y=\"current\", text=list(\"2020\"), lineAnchor=\"top\", dy=6)   ),   yGrid=TRUE,   yLabel=\"↑ Travelers per day\",   yTickFormat=\"s\" )  mosaic(spec)"},{"path":"https://dfalbel.github.io/mosaic/articles/get-started.html","id":"inputs","dir":"Articles","previous_headings":"Usage > Using in static documents","what":"Inputs","title":"Get Started","text":"Mosaic supports interactive inputs can used filter modify plot. inputs executed managed client side, ’s need backing server handle user interactions. Thus, can used static documents. ’s small example: Mosaic provides many different types inputs sliders, menus search. See inputs documentation details.","code":"spec <- list(   meta=list(     title=\"Aeromagnetic Survey\",     description=\"A raster visualization of the 1955 [Great Britain aeromagnetic survey](https://www.bgs.ac.uk/datasets/gb-aeromagnetic-survey/), which measured the Earth’s magnetic field by plane. Each sample recorded the longitude and latitude alongside the strength of the [IGRF](https://www.ncei.noaa.gov/products/international-geomagnetic-reference-field) in [nanoteslas](https://en.wikipedia.org/wiki/Tesla_(unit)). This example demonstrates both raster interpolation and smoothing (blur) options.\",     credit=\"Adapted from an [Observable Plot example](https://observablehq.com/@observablehq/plot-igfr90-raster).\"   ),   data=list(ca55=list(file=\"data/ca55-south.parquet\")),   params=list(interp=\"random-walk\", blur=0),   vconcat=list(     list(hconcat=list(       list(input=\"menu\",label=\"Interpolation Method\",options=list(\"none\",\"nearest\",\"barycentric\",\"random-walk\"),as=\"$interp\"),       list(hspace=\"1em\"),       list(input=\"slider\",label=\"Blur\",min=0,max=100,as=\"$blur\")     )),     list(vspace=\"1em\"),     list(plot=list(       list(         mark=\"raster\",         data=list(from=\"ca55\"),x=\"LONGITUDE\",y=\"LATITUDE\",         fill=list(max=\"MAG_IGRF90\"),         interpolate=\"$interp\",         bandwidth=\"$blur\"       )     ))   ) )  mosaic(spec)"},{"path":"https://dfalbel.github.io/mosaic/articles/get-started.html","id":"using-in-shiny-applications","dir":"Articles","previous_headings":"Usage","what":"Using in Shiny applications","title":"Get Started","text":"use Mosaic Shiny applications, can use mosaicOutput function create UI output element renderMosaic combined mosaic function. Additionally, use mosaicServer Shiny module handle data transfers server client. mosaicServer secret sauce mosaic package, allowing visualize datasets thousands data points without overloading client. sending data needed render current view plot, can also execute SQL queries filter aggregate data server side. Mosaic able make optimzied queries based current view, plot size resolution. See Queries & Optimization additional information. spec syntax similar one used static documents, main difference ’re going use data field spec provide data named arguments mosaic function. Instead, insert dataset want visualize duckdb connection pass connection mosaicServer module. ’s simple example Shiny application uses Mosaic create interactive scatter plot: approach, can create interactive scalable data visualizations Shiny applications using Mosaic framework. Feel free try creating plots much larger datasets explore capabilities Mosaic!","code":"library(shiny) library(mosaic) library(DBI) library(duckdb)  ui <- fluidPage(   titlePanel(\"Mosaic in Shiny\"),   sidebarLayout(     sidebarPanel(       helpText(\"An example of using Mosaic in a Shiny application.\")     ),     mainPanel(       mosaicOutput(\"mosaicPlot\")     )   ) )  # Create a duckdb connection con <- dbConnect(duckdb::duckdb(), dbdir=\":memory:\")  # Copy the penguins dataset to the duckdb connection dbWriteTable(con, \"penguins\", penguins)  server <- function(input, output, session) {      # Define the mosaic specification   spec <- list(     plot = list(       list(         mark = \"dot\",         data = list(from = \"penguins\"),         x = \"body_mass\",         y = \"flipper_len\",         stroke = list(column = \"species\"),         symbol = list(column = \"species\")       )     )   )      # Call the mosaicServer module   api_id <- mosaicServer(\"mosaicPlot\", con)      # Render the mosaic plot   output$mosaicPlot <- renderMosaic({     mosaic(spec, api = api_id())   }) }  shinyApp(ui, server)"},{"path":"https://dfalbel.github.io/mosaic/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://dfalbel.github.io/mosaic/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2025). mosaic: Package (One Line, Title Case). R package version 0.0.0.9000, https://github.com/dfalbel/mosaic.","code":"@Manual{,   title = {mosaic: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/dfalbel/mosaic}, }"},{"path":"https://dfalbel.github.io/mosaic/reference/mosaic-shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny bindings for mosaic — mosaic-shiny","title":"Shiny bindings for mosaic — mosaic-shiny","text":"Output render functions using mosaic within Shiny applications interactive Rmd documents.","code":""},{"path":"https://dfalbel.github.io/mosaic/reference/mosaic-shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny bindings for mosaic — mosaic-shiny","text":"","code":"mosaicOutput(outputId, width = \"100%\", height = \"400px\")  renderMosaic(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://dfalbel.github.io/mosaic/reference/mosaic-shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny bindings for mosaic — mosaic-shiny","text":"outputId output variable read width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. expr expression generates mosaic env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable.","code":""},{"path":"https://dfalbel.github.io/mosaic/reference/mosaic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Mosaic Widget — mosaic","title":"Create a Mosaic Widget — mosaic","text":"Create Mosaic widget can used R Markdown documents, Shiny apps, R console.","code":""},{"path":"https://dfalbel.github.io/mosaic/reference/mosaic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Mosaic Widget — mosaic","text":"","code":"mosaic(   spec,   ...,   api = NULL,   width = NULL,   height = NULL,   elementId = NULL,   baseURL = NULL )"},{"path":"https://dfalbel.github.io/mosaic/reference/mosaic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Mosaic Widget — mosaic","text":"spec list representing Mosaic specification. See specification format reference details. ... Named data frames used plot. data frame added spec efficient format can used plot. Can used non-Shiny contexts using api parameter. using api, insert data directly duckdb connection. api optional string identifier server-side data API. can used fetch data server-side DuckDB database. used Shiny apps combination mosaicServer(). width width widget (optional). Note overrides width specified spec. height height widget (optional). Note overrides height specified spec. elementId optional element ID widget. baseURL baseURL used acquire files. See additional docs astToDom.","code":""},{"path":"https://dfalbel.github.io/mosaic/reference/mosaicServer.html","id":null,"dir":"Reference","previous_headings":"","what":"Mosaic Server — mosaicServer","title":"Mosaic Server — mosaicServer","text":"Creates registers global mosaic API, coordinator connector can acessed js using:","code":""},{"path":"https://dfalbel.github.io/mosaic/reference/mosaicServer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mosaic Server — mosaicServer","text":"","code":"mosaicServer(id, connection)"},{"path":"https://dfalbel.github.io/mosaic/reference/mosaicServer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mosaic Server — mosaicServer","text":"id id module. connection DBI connection DuckDB database.","code":""},{"path":"https://dfalbel.github.io/mosaic/reference/mosaicServer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mosaic Server — mosaicServer","text":"shiny reactive returns id API.","code":""},{"path":"https://dfalbel.github.io/mosaic/reference/mosaicServer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mosaic Server — mosaicServer","text":"function intended used Shiny apps combination api parameter mosaic() function. Allowing create plots fetch data server-side DuckDB database, need send large datasets client.","code":"window.[id] window.[id + \"_coordinator\"] window.[id + \"_connector\"]"}]
