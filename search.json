[{"path":"https://dfalbel.github.io/mosaicr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 mosaic authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/areaY-mark.html","id":"basic-example","dir":"Articles > Examples > Marks","previous_headings":"","what":"Basic Example","title":"areaY Mark","text":"","code":"# Sample data data <- data.frame(   category = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"),   value = c(2, 8, 3, 7, 5, 4, 6, 1) )  spec <- list(   plot = list(     list(       mark = \"areaY\",       data = list(from = \"sample_data\"),       x = \"category\",       y = \"value\",       fill = \"steelblue\"     )   ) )  mosaic(spec, sample_data = data)"},{"path":[]},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/areaY-mark.html","id":"time-series-area","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Time Series Area","title":"areaY Mark","text":"","code":"# Time series data time_data <- data.frame(   date = seq(as.Date(\"2023-01-01\"), as.Date(\"2023-12-31\"), by = \"month\"),   revenue = c(100, 120, 115, 130, 145, 160, 155, 170, 165, 180, 190, 200) )  spec_time <- list(   plot = list(     list(       mark = \"areaY\",       data = list(from = \"time_data\"),       x = \"date\",       y = \"revenue\",       fill = \"lightgreen\",       fillOpacity = 0.7     )   ) )  mosaic(spec_time, time_data = time_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/areaY-mark.html","id":"stacked-areas","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Stacked Areas","title":"areaY Mark","text":"","code":"# Stacked area data stacked_data <- data.frame(   month = rep(1:6, times = 3),   category = rep(c(\"Product A\", \"Product B\", \"Product C\"), each = 6),   sales = c(     c(20, 25, 30, 28, 35, 40),  # Product A     c(15, 18, 22, 25, 28, 30),  # Product B     c(10, 12, 15, 18, 20, 25)   # Product C   ) )  spec_stacked <- list(   plot = list(     list(       mark = \"areaY\",       data = list(from = \"stacked_data\"),       x = \"month\",       y = \"sales\",       fill = list(column = \"category\"),       fillOpacity = 0.8     )   ) )  mosaic(spec_stacked, stacked_data = stacked_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/areaY-mark.html","id":"area-with-outline","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Area with Outline","title":"areaY Mark","text":"","code":"spec_outlined <- list(   plot = list(     list(       mark = \"areaY\",       data = list(from = \"time_data\"),       x = \"date\",       y = \"revenue\",       fill = \"lightcoral\",       fillOpacity = 0.6,       stroke = \"darkred\",       strokeWidth = 2     )   ) )  mosaic(spec_outlined, time_data = time_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/areaY-mark.html","id":"use-cases","dir":"Articles > Examples > Marks","previous_headings":"","what":"Use Cases","title":"areaY Mark","text":"Time Series: Excellent showing trends changes time Cumulative Data: Perfect displaying running totals cumulative values Part--Whole: Stacked areas show parts contribute whole Magnitude Emphasis: filled area emphasizes size values Financial Data: Common financial charts showing revenue, profit, etc.","code":""},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/barY-mark.html","id":"basic-example","dir":"Articles > Examples > Marks","previous_headings":"","what":"Basic Example","title":"barY Mark","text":"","code":"# Sample data data <- data.frame(   category = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"),   value = c(2, 8, 3, 7, 5, 4, 6, 1) )  spec <- list(   plot = list(     list(       mark = \"barY\",       data = list(from = \"sample_data\"),       x = \"category\",       y = \"value\",       fill = \"steelblue\"     )   ) )  mosaic(spec, sample_data = data)"},{"path":[]},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/barY-mark.html","id":"color-by-category","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Color by Category","title":"barY Mark","text":"","code":"spec_colored <- list(   plot = list(     list(       mark = \"barY\",       data = list(from = \"sample_data\"),       x = \"category\",       y = \"value\",       fill = list(column = \"category\")     )   ) )  mosaic(spec_colored, sample_data = data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/barY-mark.html","id":"grouped-bars","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Grouped Bars","title":"barY Mark","text":"","code":"# Sample data with groups grouped_data <- data.frame(   category = rep(c(\"A\", \"B\", \"C\", \"D\"), each = 2),   group = rep(c(\"Group 1\", \"Group 2\"), times = 4),   value = c(2, 3, 8, 6, 3, 4, 7, 5) )  spec_grouped <- list(   plot = list(     list(       mark = \"barY\",       data = list(from = \"grouped_data\"),       x = \"category\",       y = \"value\",       fill = list(column = \"group\")     )   ) )  mosaic(spec_grouped, grouped_data = grouped_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/barY-mark.html","id":"use-cases","dir":"Articles > Examples > Marks","previous_headings":"","what":"Use Cases","title":"barY Mark","text":"Categorical Data: Perfect displaying values across discrete categories Comparisons: Easy compare values different categories Frequency Counts: Ideal showing counts frequencies categorical data Survey Results: Commonly used displaying survey response distributions","code":""},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/contour-mark.html","id":"basic-example","dir":"Articles > Examples > Marks","previous_headings":"","what":"Basic Example","title":"contour Mark","text":"","code":"# Generate 2D density data set.seed(123) n <- 1000 data <- data.frame(   x = rnorm(n, 50, 15),   y = rnorm(n, 50, 15) )  spec <- list(   plot = list(     list(       mark = \"contour\",       data = list(from = \"sample_data\"),       x = \"x\",       y = \"y\",       stroke = \"steelblue\"     )   ) )  mosaic(spec, sample_data = data)"},{"path":[]},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/contour-mark.html","id":"multiple-contour-levels","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Multiple Contour Levels","title":"contour Mark","text":"","code":"# Bivariate normal with correlation set.seed(456) n <- 2000  # Create correlated variables x1 <- rnorm(n) x2 <- 0.7 * x1 + sqrt(1 - 0.7^2) * rnorm(n)  correlated_data <- data.frame(   x = x1,   y = x2 )  spec_levels <- list(   plot = list(     list(       mark = \"contour\",       data = list(from = \"correlated_data\"),       x = \"x\",       y = \"y\",       stroke = \"darkblue\",       strokeWidth = 1.5     )   ) )  mosaic(spec_levels, correlated_data = correlated_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/contour-mark.html","id":"multiple-distributions","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Multiple Distributions","title":"contour Mark","text":"","code":"# Create data with multiple peaks set.seed(789) n_per_group <- 400  multi_peak_data <- data.frame(   x = c(     rnorm(n_per_group, -1, 0.5),   # Peak 1     rnorm(n_per_group, 1, 0.5),    # Peak 2     rnorm(n_per_group, 0, 0.3)     # Peak 3 (center)   ),   y = c(     rnorm(n_per_group, 1, 0.4),    # Peak 1     rnorm(n_per_group, -1, 0.4),   # Peak 2     rnorm(n_per_group, 0, 0.3)     # Peak 3 (center)   ) )  spec_multi <- list(   plot = list(     list(       mark = \"contour\",       data = list(from = \"multi_peak_data\"),       x = \"x\",       y = \"y\",       stroke = \"purple\",       strokeWidth = 2     )   ) )  mosaic(spec_multi, multi_peak_data = multi_peak_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/contour-mark.html","id":"combined-with-points","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Combined with Points","title":"contour Mark","text":"","code":"# Show both the data points and contours spec_combined <- list(   plot = list(     list(       mark = \"dot\",       data = list(from = \"correlated_data\"),       x = \"x\",       y = \"y\",       fill = \"lightblue\",       fillOpacity = 0.3,       r = 2     ),     list(       mark = \"contour\",       data = list(from = \"correlated_data\"),       x = \"x\",       y = \"y\",       stroke = \"navy\",       strokeWidth = 2     )   ) )  mosaic(spec_combined, correlated_data = correlated_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/contour-mark.html","id":"filled-contours","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Filled Contours","title":"contour Mark","text":"","code":"# Using filled contours for better visualization spec_filled <- list(   plot = list(     list(       mark = \"contour\",       data = list(from = \"multi_peak_data\"),       x = \"x\",       y = \"y\",       fill = \"density\",       stroke = \"white\",       strokeWidth = 1     )   ),   colorScheme = \"viridis\" )  mosaic(spec_filled, multi_peak_data = multi_peak_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/contour-mark.html","id":"advanced-example","dir":"Articles > Examples > Marks","previous_headings":"","what":"Advanced Example","title":"contour Mark","text":"","code":"# Simulate a more complex surface (e.g., a mathematical function) create_surface_data <- function() {   x_seq <- seq(-3, 3, length.out = 50)   y_seq <- seq(-3, 3, length.out = 50)   grid <- expand.grid(x = x_seq, y = y_seq)    # Create a complex surface   grid$z <- with(grid, sin(sqrt(x^2 + y^2)) * exp(-0.1 * (x^2 + y^2)))    return(grid) }  surface_data <- create_surface_data()  spec_surface <- list(   plot = list(     list(       mark = \"contour\",       data = list(from = \"surface_data\"),       x = \"x\",       y = \"y\",       fill = \"z\",       stroke = \"black\",       strokeWidth = 0.5,       strokeOpacity = 0.7     )   ),   colorScheme = \"spectral\",   xLabel = \"X coordinate\",   yLabel = \"Y coordinate\" )  mosaic(spec_surface, surface_data = surface_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/contour-mark.html","id":"use-cases","dir":"Articles > Examples > Marks","previous_headings":"","what":"Use Cases","title":"contour Mark","text":"Density Visualization: Showing probability density 2D distributions Topographic Maps: Representing elevation geographic data Scientific Data: Visualizing continuous fields physics, chemistry, biology Statistical Analysis: Exploring bivariate distributions properties Function Visualization: Displaying mathematical functions two variables","code":""},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/dot-mark.html","id":"basic-example","dir":"Articles > Examples > Marks","previous_headings":"","what":"Basic Example","title":"dot Mark","text":"","code":"# Sample data data <- data.frame(   x_val = c(1, 2, 3, 4, 5, 6, 7, 8),   y_val = c(2, 8, 3, 7, 5, 4, 6, 1) )  spec <- list(   plot = list(     list(       mark = \"dot\",       data = list(from = \"sample_data\"),       x = \"x_val\",       y = \"y_val\",       fill = \"steelblue\"     )   ) )  mosaic(spec, sample_data = data)"},{"path":[]},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/dot-mark.html","id":"size-and-color-mapping","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Size and Color Mapping","title":"dot Mark","text":"","code":"# Enhanced scatter plot data enhanced_data <- data.frame(   x = rnorm(50, 10, 2),   y = rnorm(50, 15, 3),   size = runif(50, 1, 10),   category = sample(c(\"A\", \"B\", \"C\"), 50, replace = TRUE) )  spec_enhanced <- list(   plot = list(     list(       mark = \"dot\",       data = list(from = \"enhanced_data\"),       x = \"x\",       y = \"y\",       r = list(column = \"size\"),       fill = list(column = \"category\"),       fillOpacity = 0.7     )   ) )  mosaic(spec_enhanced, enhanced_data = enhanced_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/dot-mark.html","id":"using-built-in-datasets","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Using Built-in Datasets","title":"dot Mark","text":"","code":"# Using the penguins dataset for a classic example spec_penguins <- list(   plot = list(     list(       mark = \"dot\",       data = list(from = \"penguins\"),       x = \"body_mass_g\",       y = \"flipper_length_mm\",       fill = list(column = \"species\"),       r = 3,       fillOpacity = 0.8     )   ),   xLabel = \"Body Mass (g)\",   yLabel = \"Flipper Length (mm)\" )  mosaic(spec_penguins, penguins = penguins)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/dot-mark.html","id":"multiple-series","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Multiple Series","title":"dot Mark","text":"","code":"# Multiple related datasets set.seed(42) multi_data <- data.frame(   x = rep(1:20, times = 3),   y = c(     1:20 + rnorm(20, 0, 2),           # Linear trend     sin((1:20) * 0.5) * 5 + 10 + rnorm(20, 0, 1),  # Sine wave     20:1 + rnorm(20, 0, 1.5)          # Negative trend   ),   series = rep(c(\"Linear\", \"Sine\", \"Negative\"), each = 20) )  spec_multi <- list(   plot = list(     list(       mark = \"dot\",       data = list(from = \"multi_data\"),       x = \"x\",       y = \"y\",       fill = list(column = \"series\"),       r = 4,       fillOpacity = 0.8     )   ) )  mosaic(spec_multi, multi_data = multi_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/dot-mark.html","id":"use-cases","dir":"Articles > Examples > Marks","previous_headings":"","what":"Use Cases","title":"dot Mark","text":"Correlation Analysis: Exploring relationships two continuous variables Classification: Visualizing different groups cluster 2D space Outlier Detection: Identifying unusual data points Pattern Recognition: Discovering trends patterns data Scientific Research: Standard visualization experimental data","code":""},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/heatmap-mark.html","id":"basic-example","dir":"Articles > Examples > Marks","previous_headings":"","what":"Basic Example","title":"heatmap Mark","text":"","code":"# Create a simple heatmap dataset heatmap_data <- expand.grid(   x = 1:8,   y = 1:6 ) heatmap_data$value <- sin(heatmap_data$x * 0.5) * cos(heatmap_data$y * 0.3) * 10  spec <- list(   plot = list(     list(       mark = \"rect\",       data = list(from = \"heatmap_data\"),       x = \"x\",       y = \"y\",       fill = list(column = \"value\")     )   ) )  mosaic(spec, heatmap_data = heatmap_data)"},{"path":[]},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/heatmap-mark.html","id":"correlation-matrix","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Correlation Matrix","title":"heatmap Mark","text":"","code":"# Create a correlation matrix visualization set.seed(123) vars <- c(\"Var1\", \"Var2\", \"Var3\", \"Var4\", \"Var5\") n_vars <- length(vars)  # Create correlation matrix data correlation_data <- expand.grid(   x = vars,   y = vars )  # Generate realistic correlation values correlation_data$correlation <- c(   1.0, 0.3, -0.2, 0.7, 0.1,    # Var1 correlations   0.3, 1.0, 0.5, -0.1, 0.8,    # Var2 correlations   -0.2, 0.5, 1.0, 0.2, 0.4,    # Var3 correlations   0.7, -0.1, 0.2, 1.0, -0.3,   # Var4 correlations   0.1, 0.8, 0.4, -0.3, 1.0     # Var5 correlations )  spec_corr <- list(   plot = list(     list(       mark = \"rect\",       data = list(from = \"correlation_data\"),       x = \"x\",       y = \"y\",       fill = \"correlation\",       stroke = \"white\",       strokeWidth = 1     )   ),   colorScheme = \"rdbu\",   xLabel = \"Variables\",   yLabel = \"Variables\" )  mosaic(spec_corr, correlation_data = correlation_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/heatmap-mark.html","id":"time-series-heatmap","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Time Series Heatmap","title":"heatmap Mark","text":"","code":"# Create a time-based heatmap (e.g., hourly data by day) days <- c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\") hours <- 0:23  time_data <- expand.grid(   day = days,   hour = hours )  # Simulate activity patterns (higher during day, weekends different) set.seed(456) time_data$activity <- with(time_data, {   base_activity <- ifelse(hour >= 6 & hour <= 22,                          sin((hour - 6) * pi / 16) * 50 + 30,                          runif(length(hour), 5, 15))    # Weekend modifier   weekend_modifier <- ifelse(day %in% c(\"Sat\", \"Sun\"), 1.2, 1.0)    pmax(0, base_activity * weekend_modifier + rnorm(length(hour), 0, 5)) })  spec_time <- list(   plot = list(     list(       mark = \"rect\",       data = list(from = \"time_data\"),       x = \"hour\",       y = \"day\",       fill = list(column = \"activity\"),       stroke = \"white\",       strokeWidth = 0.5     )   ),   colorScheme = \"plasma\",   xLabel = \"Hour of Day\",   yLabel = \"Day of Week\" )  mosaic(spec_time, time_data = time_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/heatmap-mark.html","id":"geographic-grid","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Geographic Grid","title":"heatmap Mark","text":"","code":"# Simulate a geographic heatmap grid_size <- 10 geo_data <- expand.grid(   longitude = seq(-5, 5, length.out = grid_size),   latitude = seq(-5, 5, length.out = grid_size) )  # Create a pattern that resembles geographic data geo_data$temperature <- with(geo_data, {   # Distance from center   distance <- sqrt(longitude^2 + latitude^2)   # Temperature decreases with distance, with some noise   25 - 2 * distance + rnorm(nrow(geo_data), 0, 1) })  spec_geo <- list(   plot = list(     list(       mark = \"rect\",       data = list(from = \"geo_data\"),       x = \"longitude\",       y = \"latitude\",       fill = list(column = \"temperature\"),       stroke = \"none\"     )   ),   colorScheme = \"turbo\",   xLabel = \"Longitude\",   yLabel = \"Latitude\" )  mosaic(spec_geo, geo_data = geo_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/heatmap-mark.html","id":"annotated-heatmap","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Annotated Heatmap","title":"heatmap Mark","text":"","code":"# Small heatmap with text annotations small_data <- expand.grid(   category_x = c(\"A\", \"B\", \"C\", \"D\"),   category_y = c(\"Type 1\", \"Type 2\", \"Type 3\") )  small_data$value <- c(23, 45, 12, 67, 34, 56, 78, 29, 41, 33, 52, 18)  spec_annotated <- list(   plot = list(     list(       mark = \"rect\",       data = list(from = \"small_data\"),       x = \"category_x\",       y = \"category_y\",       fill = list(column = \"value\"),       stroke = \"white\",       strokeWidth = 2     ),     list(       mark = \"text\",       data = list(from = \"small_data\"),       x = \"category_x\",       y = \"category_y\",       text = \"value\",       fill = \"white\",       fontSize = 12     )   ),   colorScheme = \"viridis\" )  mosaic(spec_annotated, small_data = small_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/heatmap-mark.html","id":"use-cases","dir":"Articles > Examples > Marks","previous_headings":"","what":"Use Cases","title":"heatmap Mark","text":"Correlation Analysis: Visualizing correlation matrices variables Time Patterns: Showing patterns across time periods (hourly, daily, seasonal) Geographic Data: Displaying spatial patterns regional differences Performance Metrics: Showing performance across different categories time periods Scientific Data: Visualizing matrix-structured quantitative data","code":""},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/hexbin-mark.html","id":"basic-example","dir":"Articles > Examples > Marks","previous_headings":"","what":"Basic Example","title":"hexbin Mark","text":"","code":"# Generate dense scatter plot data set.seed(123) n <- 1000 data <- data.frame(   x = rnorm(n, 50, 15),   y = rnorm(n, 50, 15) )  spec <- list(   plot = list(     list(       mark = \"hexbin\",       data = list(from = \"sample_data\"),       x = \"x\",       y = \"y\",       fill = list(count = NULL)     )   ) )  mosaic(spec, sample_data = data)"},{"path":[]},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/hexbin-mark.html","id":"custom-color-scheme","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Custom Color Scheme","title":"hexbin Mark","text":"","code":"# Bivariate normal distribution set.seed(456) n <- 2000 bivar_data <- data.frame(   x = rnorm(n, 0, 1),   y = rnorm(n, 0, 1) )  spec_colored <- list(   plot = list(     list(       mark = \"hexbin\",       data = list(from = \"bivar_data\"),       x = \"x\",       y = \"y\",       fill = list(count = NULL),       fillOpacity = 0.8     )   ),   colorScheme = \"viridis\" )  mosaic(spec_colored, bivar_data = bivar_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/hexbin-mark.html","id":"multiple-distributions","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Multiple Distributions","title":"hexbin Mark","text":"","code":"# Create data with multiple clusters set.seed(789) n_per_cluster <- 500  cluster_data <- data.frame(   x = c(     rnorm(n_per_cluster, 20, 5),   # Cluster 1     rnorm(n_per_cluster, 60, 8),   # Cluster 2     rnorm(n_per_cluster, 40, 6)    # Cluster 3   ),   y = c(     rnorm(n_per_cluster, 30, 7),   # Cluster 1     rnorm(n_per_cluster, 70, 5),   # Cluster 2     rnorm(n_per_cluster, 20, 4)    # Cluster 3   ) )  spec_clusters <- list(   plot = list(     list(       mark = \"hexbin\",       data = list(from = \"cluster_data\"),       x = \"x\",       y = \"y\",       fill = list(count = NULL)     )   ),   colorScheme = \"plasma\" )  mosaic(spec_clusters, cluster_data = cluster_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/hexbin-mark.html","id":"with-background-grid","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"With Background Grid","title":"hexbin Mark","text":"","code":"# Hexbin with grid for reference spec_grid <- list(   plot = list(     list(       mark = \"hexgrid\",       stroke = \"#aaa\",       strokeOpacity = 0.3     ),     list(       mark = \"hexbin\",       data = list(from = \"bivar_data\"),       x = \"x\",       y = \"y\",       fill = list(count = NULL),       fillOpacity = 0.7     )   ) )  mosaic(spec_grid, bivar_data = bivar_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/hexbin-mark.html","id":"real-world-example","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Real-world Example","title":"hexbin Mark","text":"","code":"# Using a larger dataset (simulated real-world scenario) set.seed(999) n <- 5000  # Simulate correlation between variables x_vals <- rnorm(n, 100, 20) y_vals <- 0.8 * x_vals + rnorm(n, 0, 15)  realworld_data <- data.frame(   measurement_a = x_vals,   measurement_b = y_vals )  spec_realworld <- list(   plot = list(     list(       mark = \"hexbin\",       data = list(from = \"realworld_data\"),       x = \"measurement_a\",       y = \"measurement_b\",       fill = list(count = NULL)     )   ),   xLabel = \"Measurement A\",   yLabel = \"Measurement B\",   colorScheme = \"turbo\" )  mosaic(spec_realworld, realworld_data = realworld_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/hexbin-mark.html","id":"use-cases","dir":"Articles > Examples > Marks","previous_headings":"","what":"Use Cases","title":"hexbin Mark","text":"Large Datasets: Essential visualizing datasets thousands millions points Density Visualization: Shows data points concentrated Overplotting Solution: Replaces scatter plots points overlap much Pattern Detection: Reveals patterns might hidden dense scatter plots Statistical Analysis: Useful exploring bivariate distributions correlations","code":""},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/lineY-mark.html","id":"basic-example","dir":"Articles > Examples > Marks","previous_headings":"","what":"Basic Example","title":"lineY Mark","text":"","code":"# Sample data data <- data.frame(   category = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"),   value = c(2, 8, 3, 7, 5, 4, 6, 1) )  spec <- list(   plot = list(     list(       mark = \"lineY\",       data = list(from = \"sample_data\"),       x = \"category\",       y = \"value\",       stroke = \"steelblue\"     )   ) )  mosaic(spec, sample_data = data)"},{"path":[]},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/lineY-mark.html","id":"with-markers","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"With Markers","title":"lineY Mark","text":"","code":"spec_markers <- list(   plot = list(     list(       mark = \"lineY\",       data = list(from = \"sample_data\"),       x = \"category\",       y = \"value\",       stroke = \"steelblue\",       marker = \"circle\"     )   ) )  mosaic(spec_markers, sample_data = data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/lineY-mark.html","id":"curved-lines","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Curved Lines","title":"lineY Mark","text":"","code":"spec_curved <- list(   plot = list(     list(       mark = \"lineY\",       data = list(from = \"sample_data\"),       x = \"category\",       y = \"value\",       stroke = \"steelblue\",       curve = \"monotone-x\",       marker = \"circle\"     )   ) )  mosaic(spec_curved, sample_data = data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/lineY-mark.html","id":"multiple-lines","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Multiple Lines","title":"lineY Mark","text":"","code":"# Time series data time_data <- data.frame(   date = rep(as.Date(\"2023-01-01\") + 0:11, times = 2),   series = rep(c(\"Series A\", \"Series B\"), each = 12),   value = c(     c(10, 12, 8, 15, 18, 14, 20, 16, 22, 19, 25, 21),     c(8, 10, 12, 9, 14, 16, 13, 18, 15, 20, 17, 23)   ) )  spec_multiple <- list(   plot = list(     list(       mark = \"lineY\",       data = list(from = \"time_data\"),       x = \"date\",       y = \"value\",       stroke = list(column = \"series\"),       marker = \"circle\"     )   ) )  mosaic(spec_multiple, time_data = time_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/lineY-mark.html","id":"use-cases","dir":"Articles > Examples > Marks","previous_headings":"","what":"Use Cases","title":"lineY Mark","text":"Time Series: Perfect displaying data changes time Trends: Shows patterns trends continuous data Comparisons: Multiple lines can compare different series Scientific Data: Common research showing relationships variables","code":""},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/regressionY-mark.html","id":"basic-example","dir":"Articles > Examples > Marks","previous_headings":"","what":"Basic Example","title":"regressionY Mark","text":"","code":"# Generate sample data with a clear trend set.seed(123) data <- data.frame(   x = 1:20,   y = 2 * (1:20) + rnorm(20, 0, 3) )  spec <- list(   plot = list(     list(       mark = \"dot\",       data = list(from = \"sample_data\"),       x = \"x\",       y = \"y\",       fill = \"lightblue\",       r = 3     ),     list(       mark = \"regressionY\",       data = list(from = \"sample_data\"),       x = \"x\",       y = \"y\",       stroke = \"steelblue\",       strokeWidth = 2     )   ) )  mosaic(spec, sample_data = data)"},{"path":[]},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/regressionY-mark.html","id":"different-regression-types","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Different Regression Types","title":"regressionY Mark","text":"","code":"# Polynomial relationship set.seed(42) poly_data <- data.frame(   x = seq(-3, 3, length.out = 30),   y = -0.5 * seq(-3, 3, length.out = 30)^2 + 2 * seq(-3, 3, length.out = 30) + rnorm(30, 0, 0.5) )  spec_poly <- list(   plot = list(     list(       mark = \"dot\",       data = list(from = \"poly_data\"),       x = \"x\",       y = \"y\",       fill = \"coral\",       r = 3     ),     list(       mark = \"regressionY\",       data = list(from = \"poly_data\"),       x = \"x\",       y = \"y\",       stroke = \"darkred\",       strokeWidth = 2     )   ) )  mosaic(spec_poly, poly_data = poly_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/regressionY-mark.html","id":"multiple-groups","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Multiple Groups","title":"regressionY Mark","text":"","code":"# Data with different groups set.seed(789) grouped_data <- data.frame(   x = rep(1:15, times = 3),   y = c(     2 * (1:15) + rnorm(15, 0, 2),      # Group A: positive slope     -1.5 * (1:15) + 20 + rnorm(15, 0, 2), # Group B: negative slope     0.3 * (1:15) + 8 + rnorm(15, 0, 1)    # Group C: slight positive   ),   group = rep(c(\"Group A\", \"Group B\", \"Group C\"), each = 15) )  spec_groups <- list(   plot = list(     list(       mark = \"dot\",       data = list(from = \"grouped_data\"),       x = \"x\",       y = \"y\",       fill = list(column = \"group\"),       r = 3,       fillOpacity = 0.7     ),     list(       mark = \"regressionY\",       data = list(from = \"grouped_data\"),       x = \"x\",       y = \"y\",       stroke = list(column = \"group\"),       strokeWidth = 2     )   ) )  mosaic(spec_groups, grouped_data = grouped_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/regressionY-mark.html","id":"using-real-data","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Using Real Data","title":"regressionY Mark","text":"","code":"# Using penguins data for regression analysis spec_penguins <- list(   plot = list(     list(       mark = \"dot\",       data = list(from = \"penguins\"),       x = \"body_mass_g\",       y = \"flipper_length_mm\",       fill = list(column = \"species\"),       r = 3,       fillOpacity = 0.6     ),     list(       mark = \"regressionY\",       data = list(from = \"penguins\"),       x = \"body_mass_g\",       y = \"flipper_length_mm\",       stroke = \"black\",       strokeWidth = 2     )   ),   xLabel = \"Body Mass (g)\",   yLabel = \"Flipper Length (mm)\" )  mosaic(spec_penguins, penguins = penguins)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/regressionY-mark.html","id":"use-cases","dir":"Articles > Examples > Marks","previous_headings":"","what":"Use Cases","title":"regressionY Mark","text":"Trend Analysis: Identifying visualizing trends data Predictive Modeling: Showing fitted models alongside data Correlation Visualization: Making relationships variables explicit Scientific Research: Standard tool showing statistical relationships Business Intelligence: Forecasting trend analysis business data","code":""},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/text-mark.html","id":"basic-example","dir":"Articles > Examples > Marks","previous_headings":"","what":"Basic Example","title":"text Mark","text":"","code":"# Sample data data <- data.frame(   category = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"),   value = c(2, 8, 3, 7, 5, 4, 6, 1),   label = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\") )  spec <- list(   plot = list(     list(       mark = \"text\",       data = list(from = \"sample_data\"),       x = \"category\",       y = \"value\",       text = \"label\",       fill = \"steelblue\"     )   ) )  mosaic(spec, sample_data = data)"},{"path":[]},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/text-mark.html","id":"custom-text-content","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Custom Text Content","title":"text Mark","text":"","code":"# Data with custom labels labeled_data <- data.frame(   x_pos = c(1, 2, 3, 4, 5),   y_pos = c(2, 4, 1, 5, 3),   labels = c(\"Start\", \"Peak\", \"Low\", \"High\", \"End\") )  spec_custom <- list(   plot = list(     list(       mark = \"text\",       data = list(from = \"labeled_data\"),       x = \"x_pos\",       y = \"y_pos\",       text = \"labels\",       fill = \"darkred\",       fontSize = 14     )   ) )  mosaic(spec_custom, labeled_data = labeled_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/text-mark.html","id":"text-with-numeric-values","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Text with Numeric Values","title":"text Mark","text":"","code":"# Display actual values as text numeric_data <- data.frame(   category = c(\"Q1\", \"Q2\", \"Q3\", \"Q4\"),   sales = c(150, 230, 180, 290) )  spec_numeric <- list(   plot = list(     list(       mark = \"text\",       data = list(from = \"numeric_data\"),       x = \"category\",       y = \"sales\",       text = \"sales\",       fill = \"navy\",       fontSize = 12     )   ) )  mosaic(spec_numeric, numeric_data = numeric_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/text-mark.html","id":"combined-with-other-marks","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Combined with Other Marks","title":"text Mark","text":"","code":"# Bars with value labels spec_combined <- list(   plot = list(     list(       mark = \"barY\",       data = list(from = \"numeric_data\"),       x = \"category\",       y = \"sales\",       fill = \"lightblue\"     ),     list(       mark = \"text\",       data = list(from = \"numeric_data\"),       x = \"category\",       y = \"sales\",       text = \"sales\",       fill = \"black\",       dy = -5     )   ) )  mosaic(spec_combined, numeric_data = numeric_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/text-mark.html","id":"use-cases","dir":"Articles > Examples > Marks","previous_headings":"","what":"Use Cases","title":"text Mark","text":"Data Labels: Adding value labels charts Annotations: Highlighting specific points regions Category Labels: Custom labeling categorical data Text-based Visualizations: Word clouds text positioning","code":""},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/tickY-mark.html","id":"basic-example","dir":"Articles > Examples > Marks","previous_headings":"","what":"Basic Example","title":"tickY Mark","text":"","code":"# Sample data data <- data.frame(   category = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"),   value = c(2, 8, 3, 7, 5, 4, 6, 1) )  spec <- list(   plot = list(     list(       mark = \"tickY\",       data = list(from = \"sample_data\"),       x = \"category\",       y = \"value\",       stroke = \"steelblue\"     )   ) )  mosaic(spec, sample_data = data)"},{"path":[]},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/tickY-mark.html","id":"custom-styling","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Custom Styling","title":"tickY Mark","text":"","code":"spec_styled <- list(   plot = list(     list(       mark = \"tickY\",       data = list(from = \"sample_data\"),       x = \"category\",       y = \"value\",       stroke = \"darkred\",       strokeWidth = 3     )   ) )  mosaic(spec_styled, sample_data = data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/tickY-mark.html","id":"distribution-visualization","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Distribution Visualization","title":"tickY Mark","text":"","code":"# Random data for distribution set.seed(123) dist_data <- data.frame(   group = rep(c(\"Group A\", \"Group B\", \"Group C\"), each = 50),   value = c(     rnorm(50, mean = 10, sd = 2),     rnorm(50, mean = 15, sd = 3),     rnorm(50, mean = 12, sd = 2.5)   ) )  spec_distribution <- list(   plot = list(     list(       mark = \"tickY\",       data = list(from = \"dist_data\"),       x = \"group\",       y = \"value\",       stroke = list(column = \"group\"),       strokeOpacity = 0.6     )   ) )  mosaic(spec_distribution, dist_data = dist_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/tickY-mark.html","id":"combined-with-other-marks","dir":"Articles > Examples > Marks","previous_headings":"Customization Options","what":"Combined with Other Marks","title":"tickY Mark","text":"","code":"# Ticks with summary statistics summary_data <- data.frame(   category = c(\"A\", \"B\", \"C\", \"D\"),   mean_value = c(10, 15, 12, 18),   individual_values = I(list(     c(8, 9, 10, 11, 12),     c(13, 14, 15, 16, 17),     c(10, 11, 12, 13, 14),     c(16, 17, 18, 19, 20)   )) )  # Expand data for individual points expanded_data <- data.frame(   category = rep(summary_data$category, sapply(summary_data$individual_values, length)),   value = unlist(summary_data$individual_values) )  spec_combined <- list(   plot = list(     list(       mark = \"tickY\",       data = list(from = \"expanded_data\"),       x = \"category\",       y = \"value\",       stroke = \"lightblue\",       strokeOpacity = 0.7     ),     list(       mark = \"dot\",       data = list(from = \"summary_data\"),       x = \"category\",       y = \"mean_value\",       fill = \"red\",       r = 4     )   ) )  mosaic(spec_combined, expanded_data = expanded_data, summary_data = summary_data)"},{"path":"https://dfalbel.github.io/mosaicr/articles/examples/marks/tickY-mark.html","id":"use-cases","dir":"Articles > Examples > Marks","previous_headings":"","what":"Use Cases","title":"tickY Mark","text":"Distribution Plots: Showing individual data points distributions Rug Plots: Adding marginal distributions scatter plots Data Points: Marking specific values events Reference Lines: Creating visual reference points charts","code":""},{"path":"https://dfalbel.github.io/mosaicr/articles/get-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get Started","text":"install Mosaic package, can use following command R:","code":"pak::pkg_install(\"dfalbel/mosaic\")"},{"path":"https://dfalbel.github.io/mosaicr/articles/get-started.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Get Started","text":"two main use cases htmlwidgets R: Static documents: can create plot display Quarto RMarkdown documents. plot rendered interactive HTML widget output document. ’s backing server needed data embedded document. Interactive applications: can embed Mosaic plots Shiny applications create interactive dashboards data exploration tools. ’s backing server can used load data dynamically respond user inputs. mosaic R package covers use cases, way provide data generate plots slightly different depending context.","code":""},{"path":"https://dfalbel.github.io/mosaicr/articles/get-started.html","id":"using-in-static-documents","dir":"Articles","previous_headings":"Usage","what":"Using in static documents","title":"Get Started","text":"create mosaic plots, use mosaic function. First define specification. spec list describes plot(s) want create mosaic well data used optionally attributes. See specification documentation details. simplest, spec can list single plot definition. example simple scatter plot using built-penguins dataset: Similar grammars, plot consists marks — graphical primitives bars, areas, lines—serve chart layers. Mosaic uses semantics Observable Plot, plot dedicated set encoding channels named scale mappings x, y, color, opacity, etc. See marks API reference full list available marks channels. Notice static documents, provide data named argument mosaic function. name argument (penguins) must match name used spec (= \"penguins\"). Shiny applications, data provided differently (see ). add legend, modify spec include . add vconcat property adds legend scatter plot. Notice add name plot legend can refer .","code":"spec <- list(   plot = list(     list(       mark = \"dot\",       data = list(from = \"penguins\"),       x = \"body_mass\",       y = \"flipper_len\",       stroke = list(column = \"species\"),       symbol = list(column = \"species\")     )   ) ) mosaic(   spec,   penguins = penguins ) spec <- list(   vconcat = list(     list(        legend = \"symbol\",        \"for\" = \"scatter\"     ),     list(       name  = \"scatter\",       plot = list(list(         mark = \"dot\",         data = list(from = \"penguins\"),         x = \"body_mass\",         y = \"flipper_len\",         stroke = list(column = \"species\"),         symbol = list(column = \"species\")       ))     )   ) )  mosaic(   spec,   penguins = penguins )"},{"path":"https://dfalbel.github.io/mosaicr/articles/get-started.html","id":"loading-data","dir":"Articles","previous_headings":"Usage > Using in static documents","what":"Loading data","title":"Get Started","text":"Loading data way embbed full data document, may desirable large datasets. can also use data attribute spec load data asyncronously plot. also allows acquiring data remote server document visualized. Notice case, document longer fully self-contained, need fetch data server client views . Files downloaded URL relative baseURL parameter mosaic function. default, pointing examples server hosted IDL. change server public CDN providing dataset want visualize. can read Parquet, CSV, JSON files. See data loading documentation details.","code":"spec <- list(   meta=list(     title=\"Airline Travelers\",     description=\"A labeled line chart comparing airport travelers in 2019 and 2020.\",     credit=\"Adapted from an [Observable Plot example](https://observablehq.com/@observablehq/plot-labeled-line-chart).\"   ),   data=list(     travelers = list(file=\"data/travelers.parquet\"),     endpoint = \"SELECT * FROM travelers ORDER BY date DESC LIMIT 1\\n\"   ),   plot=list(     list(mark=\"ruleY\", data=c(0)),     list(mark=\"lineY\", data=list(from=\"travelers\"), x=\"date\", y=\"previous\", strokeOpacity=0.35),     list(mark=\"lineY\", data=list(from=\"travelers\"), x=\"date\", y=\"current\"),     list(mark=\"text\", data=list(from=\"endpoint\"), x=\"date\", y=\"previous\", text=list(\"2019\"), fillOpacity=0.5, lineAnchor=\"bottom\", dy=-6),     list(mark=\"text\", data=list(from=\"endpoint\"), x=\"date\", y=\"current\", text=list(\"2020\"), lineAnchor=\"top\", dy=6)   ),   yGrid=TRUE,   yLabel=\"↑ Travelers per day\",   yTickFormat=\"s\" )  mosaic(spec)"},{"path":"https://dfalbel.github.io/mosaicr/articles/get-started.html","id":"inputs","dir":"Articles","previous_headings":"Usage > Using in static documents","what":"Inputs","title":"Get Started","text":"Mosaic supports interactive inputs can used filter modify plot. inputs executed managed client side, ’s need backing server handle user interactions. Thus, can used static documents. ’s small example: Mosaic provides many different types inputs sliders, menus search. See inputs documentation details.","code":"spec <- list(   meta=list(     title=\"Aeromagnetic Survey\",     description=\"A raster visualization of the 1955 [Great Britain aeromagnetic survey](https://www.bgs.ac.uk/datasets/gb-aeromagnetic-survey/), which measured the Earth’s magnetic field by plane. Each sample recorded the longitude and latitude alongside the strength of the [IGRF](https://www.ncei.noaa.gov/products/international-geomagnetic-reference-field) in [nanoteslas](https://en.wikipedia.org/wiki/Tesla_(unit)). This example demonstrates both raster interpolation and smoothing (blur) options.\",     credit=\"Adapted from an [Observable Plot example](https://observablehq.com/@observablehq/plot-igfr90-raster).\"   ),   data=list(ca55=list(file=\"data/ca55-south.parquet\")),   params=list(interp=\"random-walk\", blur=0),   vconcat=list(     list(hconcat=list(       list(input=\"menu\",label=\"Interpolation Method\",options=list(\"none\",\"nearest\",\"barycentric\",\"random-walk\"),as=\"$interp\"),       list(hspace=\"1em\"),       list(input=\"slider\",label=\"Blur\",min=0,max=100,as=\"$blur\")     )),     list(vspace=\"1em\"),     list(plot=list(       list(         mark=\"raster\",         data=list(from=\"ca55\"),x=\"LONGITUDE\",y=\"LATITUDE\",         fill=list(max=\"MAG_IGRF90\"),         interpolate=\"$interp\",         bandwidth=\"$blur\"       )     ))   ) )  mosaic(spec)"},{"path":"https://dfalbel.github.io/mosaicr/articles/get-started.html","id":"using-in-shiny-applications","dir":"Articles","previous_headings":"Usage","what":"Using in Shiny applications","title":"Get Started","text":"use Mosaic Shiny applications, can use mosaicOutput function create UI output element renderMosaic combined mosaic function. Additionally, use mosaicServer Shiny module handle data transfers server client. mosaicServer secret sauce mosaic package, allowing visualize datasets thousands data points without overloading client. sending data needed render current view plot, can also execute SQL queries filter aggregate data server side. Mosaic able make optimzied queries based current view, plot size resolution. See Queries & Optimization additional information. spec syntax similar one used static documents, main difference ’re going use data field spec provide data named arguments mosaic function. Instead, insert dataset want visualize duckdb connection pass connection mosaicServer module. ’s simple example Shiny application uses Mosaic create interactive scatter plot: approach, can create interactive scalable data visualizations Shiny applications using Mosaic framework. Feel free try creating plots much larger datasets explore capabilities Mosaic!","code":"library(shiny) library(mosaicr) library(DBI) library(duckdb)  ui <- fluidPage(   titlePanel(\"Mosaic in Shiny\"),   sidebarLayout(     sidebarPanel(       helpText(\"An example of using Mosaic in a Shiny application.\")     ),     mainPanel(       mosaicOutput(\"mosaicPlot\")     )   ) )  # Create a duckdb connection con <- dbConnect(duckdb::duckdb(), dbdir=\":memory:\")  # Copy the penguins dataset to the duckdb connection dbWriteTable(con, \"penguins\", penguins)  server <- function(input, output, session) {      # Define the mosaic specification   spec <- list(     plot = list(       list(         mark = \"dot\",         data = list(from = \"penguins\"),         x = \"body_mass\",         y = \"flipper_len\",         stroke = list(column = \"species\"),         symbol = list(column = \"species\")       )     )   )      # Call the mosaicServer module   api_id <- mosaicServer(\"mosaicPlot\", con)      # Render the mosaic plot   output$mosaicPlot <- renderMosaic({     mosaic(spec, api = api_id())   }) }  shinyApp(ui, server)"},{"path":"https://dfalbel.github.io/mosaicr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Falbel. Author, maintainer.","code":""},{"path":"https://dfalbel.github.io/mosaicr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Falbel D (2025). mosaicr: Scalable, Interactive Data Visualization. R package version 0.0.0.9000, https://github.com/dfalbel/mosaicr.","code":"@Manual{,   title = {mosaicr: Scalable, Interactive Data Visualization},   author = {Daniel Falbel},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/dfalbel/mosaicr}, }"},{"path":"https://dfalbel.github.io/mosaicr/index.html","id":"mosaicr","dir":"","previous_headings":"","what":"Scalable, Interactive Data Visualization","title":"Scalable, Interactive Data Visualization","text":"mosaicr package integrates R Mosaic data visualization framework UW Data, enabling scalable interactive data visualization R applications documents.","code":""},{"path":"https://dfalbel.github.io/mosaicr/index.html","id":"what-is-mosaic","dir":"","previous_headings":"","what":"What is Mosaic?","title":"Scalable, Interactive Data Visualization","text":"Mosaic framework linking databases interactive views enables: Scalable visualizations handle millions data points efficiently Interactive dashboards client-side interactions Database integration optimized query processing Grammar graphics approach visualization specification","code":""},{"path":"https://dfalbel.github.io/mosaicr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Scalable, Interactive Data Visualization","text":"can install development version mosaicr GitHub :","code":"# install.packages(\"pak\") pak::pkg_install(\"dfalbel/mosaicr\")"},{"path":[]},{"path":"https://dfalbel.github.io/mosaicr/index.html","id":"static-documents","dir":"","previous_headings":"Quick Start","what":"Static Documents","title":"Scalable, Interactive Data Visualization","text":"R Markdown documents standalone HTML widgets:","code":"library(mosaicr)  # Create a scatter plot specification spec <- list(   plot = list(     mark = \"dot\",     data = list(from = \"cars\"),     x = \"speed\",     y = \"dist\"   ) )  # Generate the visualization mosaic(spec, cars = cars)"},{"path":"https://dfalbel.github.io/mosaicr/index.html","id":"shiny-applications","dir":"","previous_headings":"Quick Start","what":"Shiny Applications","title":"Scalable, Interactive Data Visualization","text":"interactive Shiny apps server-side data processing:","code":"library(shiny) library(mosaicr) library(DBI)  ui <- fluidPage(   mosaicOutput(\"plot\") )  server <- function(input, output, session) {   # Connect to database   con <- dbConnect(duckdb::duckdb(), \":memory:\")   dbWriteTable(con, \"mtcars\", mtcars)    # Register mosaic server   api_id <- mosaicServer(\"mosaic_api\", con)    # Create plot   output$plot <- renderMosaic({     mosaic(       api = api_id(),       spec = list(         plot = list(           mark = \"dot\",           data = list(from = \"mtcars\"),           x = \"mpg\",           y = \"disp\"         )       )     )   }) }  shinyApp(ui, server)"},{"path":"https://dfalbel.github.io/mosaicr/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Scalable, Interactive Data Visualization","text":"HTML Widget Integration: Works R Markdown, Jupyter notebooks, standalone HTML Shiny Support: Full integration Shiny applications Database Backend: Efficient data processing DuckDB Arrow Format: Optimized data transfer using Apache Arrow TODO: Interactions: Support interactors zoom, pan, selection Linked Views: Coordinated multiple views complex dashboards","code":""},{"path":"https://dfalbel.github.io/mosaicr/index.html","id":"examples-and-documentation","dir":"","previous_headings":"","what":"Examples and Documentation","title":"Scalable, Interactive Data Visualization","text":"complete examples, tutorials, API documentation, visit package website: 🌐 https://dfalbel.github.io/mosaicr/","code":""},{"path":"https://dfalbel.github.io/mosaicr/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related Projects","title":"Scalable, Interactive Data Visualization","text":"Mosaic Framework - Core JavaScript visualization framework Observable Plot - Grammar graphics web","code":""},{"path":"https://dfalbel.github.io/mosaicr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Scalable, Interactive Data Visualization","text":"MIT © Daniel Falbel","code":""},{"path":"https://dfalbel.github.io/mosaicr/reference/mosaic-shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny bindings for mosaic — mosaic-shiny","title":"Shiny bindings for mosaic — mosaic-shiny","text":"Output render functions using mosaic within Shiny applications interactive Rmd documents.","code":""},{"path":"https://dfalbel.github.io/mosaicr/reference/mosaic-shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny bindings for mosaic — mosaic-shiny","text":"","code":"mosaicOutput(outputId, width = \"100%\", height = \"400px\")  renderMosaic(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://dfalbel.github.io/mosaicr/reference/mosaic-shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny bindings for mosaic — mosaic-shiny","text":"outputId output variable read width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. expr expression generates mosaic env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable.","code":""},{"path":"https://dfalbel.github.io/mosaicr/reference/mosaic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Mosaic Widget — mosaic","title":"Create a Mosaic Widget — mosaic","text":"Create Mosaic widget can used R Markdown documents, Shiny apps, R console.","code":""},{"path":"https://dfalbel.github.io/mosaicr/reference/mosaic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Mosaic Widget — mosaic","text":"","code":"mosaic(   spec,   ...,   api = NULL,   width = NULL,   height = NULL,   elementId = NULL,   baseURL = NULL )"},{"path":"https://dfalbel.github.io/mosaicr/reference/mosaic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Mosaic Widget — mosaic","text":"spec list representing Mosaic specification. See specification format reference details. ... Named data frames used plot. data frame added spec efficient format can used plot. Can used non-Shiny contexts using api parameter. using api, insert data directly duckdb connection. api optional string identifier server-side data API. can used fetch data server-side DuckDB database. used Shiny apps combination mosaicServer(). width width widget (optional). Note overrides width specified spec. height height widget (optional). Note overrides height specified spec. elementId optional element ID widget. baseURL baseURL used acquire files. See additional docs astToDom.","code":""},{"path":"https://dfalbel.github.io/mosaicr/reference/mosaicServer.html","id":null,"dir":"Reference","previous_headings":"","what":"Mosaic Server — mosaicServer","title":"Mosaic Server — mosaicServer","text":"Creates registers global mosaic API, coordinator connector can acessed js using:","code":""},{"path":"https://dfalbel.github.io/mosaicr/reference/mosaicServer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mosaic Server — mosaicServer","text":"","code":"mosaicServer(id, connection)"},{"path":"https://dfalbel.github.io/mosaicr/reference/mosaicServer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mosaic Server — mosaicServer","text":"id id module. connection DBI connection DuckDB database.","code":""},{"path":"https://dfalbel.github.io/mosaicr/reference/mosaicServer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mosaic Server — mosaicServer","text":"shiny reactive returns id API.","code":""},{"path":"https://dfalbel.github.io/mosaicr/reference/mosaicServer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mosaic Server — mosaicServer","text":"function intended used Shiny apps combination api parameter mosaic() function. Allowing create plots fetch data server-side DuckDB database, need send large datasets client.","code":"window.[id] window.[id + \"_coordinator\"] window.[id + \"_connector\"]"}]
